// Generated by CoffeeScript 1.12.6

/*
 * Created by superfeng on 2017/8/17.
 */

(function() {
  var Notification, _,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = fridge;

  Notification = (function() {

    /*
     * 构造函数
     */
    function Notification() {
      this.init = bind(this.init, this);
      this.errorCodeArr = [];
      this.errorData = [];
      this.daoManager = {};
      this.overDateFoods = [];
      this.DataObject = {
        "mac": "",
        "mid": "",
        "data": "",
        "t": "",
        "itemId": [],
        "code": [],
        "evt": 0
      };
    }


    /*
     * 初始化函数
     */

    Notification.prototype.init = function() {

      /*
       * 解析故障代码
       * @param data {array}
       */
      var addTableContent, bindEvent, dateFormat, initUI, localize, parseData, parseStates, parseUrlData, whichRoom;
      parseData = (function(_this) {
        return function(data) {
          _this.errorData = [];
          if (data.length > 0) {
            return data.forEach(function(item) {
              var errorCode, errorType;
              switch (item) {
                case 1:
                  errorCode = 'E0';
                  errorType = '冷藏室传感器故障';
                  break;
                case 2:
                  errorCode = 'E8';
                  errorType = '冷藏室感温包2故障冷藏室顶';
                  break;
                case 3:
                  errorCode = 'E2';
                  errorType = '冷冻室传感器故障';
                  break;
                case 4:
                  errorCode = 'E1';
                  errorType = '变温室传感器故障';
                  break;
                case 5:
                  errorCode = 'E5';
                  errorType = '除霜传感器故障';
                  break;
                case 6:
                  errorCode = 'E4';
                  errorType = '制冰室传感器故障';
                  break;
                case 7:
                  errorCode = 'E7';
                  errorType = '瞬冷冻室红外传感器故障';
                  break;
                case 8:
                  errorCode = 'E9';
                  errorType = '制冰机红外传感器故障';
                  break;
                case 9:
                  errorCode = 'E3';
                  errorType = '瞬冷冻室传感器故障';
                  break;
                case 10:
                  errorCode = 'H6';
                  errorType = '冷冻风扇电机故障';
                  break;
                case 11:
                  errorCode = 'H3';
                  errorType = '冷凝风扇故障';
                  break;
                case 12:
                  errorCode = 'C1';
                  errorType = '变频器通讯故障';
                  break;
                case 13:
                  errorCode = 'C7';
                  errorType = '变频驱动模块异常';
                  break;
                case 14:
                  errorCode = 'PL';
                  errorType = '母线电压故障（不足）';
                  break;
                case 15:
                  errorCode = 'PH';
                  errorType = '母线电压故障（过剩）';
                  break;
                case 16:
                  errorCode = 'C5';
                  errorType = '启动、同步或过流检测故障';
                  break;
                case 17:
                  errorCode = 'C9';
                  errorType = '型号判定故障';
                  break;
                case 18:
                  errorCode = 'E6';
                  errorType = '环温传感器故障';
                  break;
                case 19:
                  errorCode = 'HU';
                  errorType = '湿度传感器故障';
                  break;
                case 20:
                  errorCode = 'C2';
                  errorType = '主板EPROM读写错误故障';
                  break;
                case 21:
                  errorCode = 'JF';
                  errorType = '显示板检测板通讯故障';
                  break;
                case 22:
                  errorCode = 'H4';
                  errorType = '除霜加热器故障';
                  break;
                case 23:
                  errorCode = 'H2';
                  errorType = '制冰齿轮箱故障';
                  break;
                case 24:
                  errorCode = 'H1';
                  errorType = '制冰剂管堵或压缩机相关故障';
                  break;
                case 25:
                  errorCode = 'H5';
                  errorType = '电动阀故障';
                  break;
                case 26:
                  errorCode = 'C3';
                  errorType = '变频器电路故障';
                  break;
                case 27:
                  errorCode = 'C4';
                  errorType = '变频器软件重置功能故障';
                  break;
                case 28:
                  errorCode = 'C6';
                  errorType = '接线错误、控制板故障';
                  break;
                case 29:
                  errorCode = 'EC';
                  errorType = '通讯故障';
              }
              return _this.errorData.push({
                "errorCode": errorCode,
                "errorType": errorType
              });
            });
          }
        };
      })(this);

      /*
       * 动态添加故障内容
       * @param parentId {string} 父节点的ID
       * @param dataObject {object} 提供需要显示的数据信息
       * @param attributeArray {array} 提供用于需要显示的属性
       */
      addTableContent = (function(_this) {
        return function(parentId, dataObject, attributeArray) {
          var parent;
          parent = document.getElementById(parentId);
          return dataObject.forEach(function(item) {
            var tRow;
            tRow = document.createElement('tr');
            attributeArray.forEach(function(attribute) {
              var tData, text;
              tData = document.createElement('td');
              text = document.createTextNode(attribute);
              tData.appendChild(text);
              return tRow.appendChild(tData);
            });
            return parent.appendChild(tRow);
          });
        };
      })(this);

      /*
       * 绑定事件
       */
      bindEvent = (function(_this) {
        return function() {
          return document.addEventListener('touchstart', function(event) {
            var find, target;
            target = event.target || event.srcElement;
            while (target.nodeName !== 'BODY') {
              find = false;
              switch (target.id) {
                case 'btn-back':
                  _.closePage();
                  find = true;
              }
              if (find) {
                break;
              } else {
                target = target.parentNode;
              }
            }
            return '';
          }, true);
        };
      })(this);

      /*
       * 本地化
       */
      localize = function() {
        $('#txtEdit').text(lang.push_page_title);
        $('#err-code').text(lang.err_code);
        $('#err-type').text(lang.err_type);
        $('#name').text(lang.food_name);
        $('#position').text(lang.position);
        return $('#storageDate').text(lang.storage_date);
      };
      whichRoom = function(pos) {
        var room;
        switch (pos) {
          case '0':
            room = '冷藏室';
            break;
          case '1':
            room = '超冰点室';
            break;
          case '2':
            room = '瞬冷冻室';
            break;
          case '3':
            room = '冷冻室';
            break;
          case '4':
            room = '变温室';
        }
        return room;
      };
      dateFormat = function(dateInit) {
        var date, month, year;
        year = dateInit.match(/\d+/g)[0];
        month = dateInit.match(/\d+/g)[1];
        return date = dateInit.match(/\d+/g)[2];
      };

      /*
       * 初始化界面
       */
      initUI = (function(_this) {
        return function() {
          if (_this.DataObject.t === "error") {
            $("#refFoodError").hide();
            $("#error").show();
            parseData(_this.DataObject.code);
            return addTableContent('malfunction', _this.errorData, ['errorCode', 'errorType']);
          } else if (_this.DataObject.t === "foodExpire" || _this.DataObject.t === "foodExpireSoon") {
            $("#error").hide();
            $("#refFoodError").show();
            return _this.daoManager.getAllItem(_this.DataObject.mac, function(foodArray) {
              foodArray.forEach(function(item) {
                return _this.DataObject.itemId.forEach(function(itemId) {
                  if (itemId === item.Value.id) {
                    return _this.overDateFoods.push(item);
                  }
                });
              });
              if (_this.overDateFoods.length > 0) {
                return addTableContent('expiration', _this.overDateFoods, ['name', 'pos']);
              } else {
                return _this.daoManager.queryItemsPush(function(foodArray) {
                  return foodArray.forEach(function(item) {
                    return _this.DataObject.itemId.forEach(function(itemId) {
                      if (itemId === item.Value.id) {
                        return _this.overDateFoods.push(item);
                      }
                    });
                  });
                });
              }
            });
          }
        };
      })(this);

      /*
       * 解析statue data数据
       */
      parseStates = (function(_this) {
        return function(pushData) {
          var err, jsonData;
          if (pushData !== "") {
            try {
              jsonData = JSON.parse(pushData);
              _this.DataObject.mac = jsonData.mac;
              _this.DataObject.mid = jsonData.mid;
              _this.DataObject.data = jsonData.data;
              _this.DataObject.t = _this.DataObject.data.t;
              if (_this.DataObject.t === "error") {
                _this.DataObject.evt = _this.DataObject.data.evt;
                return _this.DataObject.code.push(_this.DataObject.data.code);
              } else if (_this.DataObject.t === "foodExpire" || _this.DataObject.t === "foodExpireSoon") {
                return _this.DataObject.itemId = _this.DataObject.data.itemId;
              }
            } catch (error) {
              err = error;
              return console.log("parse states error: " + err);
            }
          } else {
            return navigator.PluginInterface.closePage();
          }
        };
      })(this);

      /*
       * 解析url初始值
       */
      parseUrlData = (function(_this) {
        return function() {
          var ext;
          _.mac = _.getQueryStringByName('mac');
          return ext = _.getQueryStringByName("ext");
        };
      })(this);

      /*
       * 初始化开始
       */
      FastClick.attach(document.body);
      parseUrlData();
      this.daoManager = new _.remoteStorage;
      parseStates();
      initUI();
      if (_.isDebug) {
        $('#loading').hide();
      } else {
        _.loadPageInfo((function(_this) {
          return function() {
            localize();
            return _.getStates(function() {
              _this.errorCodeArr = _.dataObject.Er;
              parseData();
              return addTableContent();
            });
          };
        })(this));
      }
      return bindEvent();
    };

    return Notification;

  })();

  _.notification = new Notification();

  window.addEventListener('DOMContentLoaded', _.notification.init.bind(_.notification), false);

  console.log(_.aaa);

}).call(this);

//# sourceMappingURL=notification.js.map
